{
  "address": "0x9a1cB30CCC4FeD0797d46E16559a05fc163C93d6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWhitelistRegistry",
          "name": "_whitelistRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "TakerIsNotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "makerAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "takerAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "makingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "takingAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "nextInteractiveData",
          "type": "bytes"
        }
      ],
      "name": "notifyFillOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistRegistry",
      "outputs": [
        {
          "internalType": "contract IWhitelistRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfa4b277d759cb0277b559acce4eadae4fe69b9cfb9b5f85ba608d1a3ad563233",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x9a1cB30CCC4FeD0797d46E16559a05fc163C93d6",
    "transactionIndex": 223,
    "gasUsed": "287778",
    "logsBloom": "0x
    "blockHash": "0xd38825eca42797e1eea09fad0821d92456613ecf81db0c30aab3372e1b80c6d4",
    "transactionHash": "0xfa4b277d759cb0277b559acce4eadae4fe69b9cfb9b5f85ba608d1a3ad563233",
    "logs": [],
    "blockNumber": 14828918,
    "cumulativeGasUsed": "27626906",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAc8D32a117799d58C5c10C7c23a9cD05f8Ce4F35"
  ],
  "numDeployments": 2,
  "solcInputHash": "411b0416832a18446dfb6058115692ee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWhitelistRegistry\",\"name\":\"_whitelistRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TakerIsNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"nextInteractiveData\",\"type\":\"bytes\"}],\"name\":\"notifyFillOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistRegistry\",\"outputs\":[{\"internalType\":\"contract IWhitelistRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/WhitelistChecker.sol\":\"WhitelistChecker\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"contracts/helpers/WhitelistChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/InteractiveNotificationReceiver.sol\\\";\\nimport \\\"../interfaces/IWhitelistRegistry.sol\\\";\\nimport \\\"../libraries/ArgumentsDecoder.sol\\\";\\n\\ncontract WhitelistChecker is InteractiveNotificationReceiver {\\n    using ArgumentsDecoder for bytes;\\n\\n    error TakerIsNotWhitelisted();\\n\\n    IWhitelistRegistry public immutable whitelistRegistry;\\n\\n    constructor(IWhitelistRegistry _whitelistRegistry) {\\n        whitelistRegistry = _whitelistRegistry;\\n    }\\n\\n    function notifyFillOrder(\\n        address taker,\\n        address makerAsset,\\n        address takerAsset,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        bytes calldata nextInteractiveData\\n    ) external override {\\n        if (whitelistRegistry.status(taker) != 1) revert TakerIsNotWhitelisted();\\n\\n        if (nextInteractiveData.length != 0) {\\n            (address interactionTarget, bytes calldata interactionData) = nextInteractiveData.decodeTargetAndData();\\n\\n            InteractiveNotificationReceiver(interactionTarget).notifyFillOrder(\\n                taker, makerAsset, takerAsset, makingAmount, takingAmount, interactionData\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x126a10880d1e2c25d05450f489e64f7f7e71c24fe6fa36f28e078be188fbc8b9\",\"license\":\"MIT\"},\"contracts/interfaces/IWhitelistRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\ninterface IWhitelistRegistry {\\n    function status(address addr) external view returns(uint256);\\n}\\n\",\"keccak256\":\"0x2f8c9d20c17eed2ef41e7048f4bade872a926e8fe8ecddb5178e892be63a1e76\",\"license\":\"MIT\"},\"contracts/interfaces/InteractiveNotificationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\n/// @title Interface for interactor which acts between `maker => taker` and `taker => maker` transfers.\\ninterface InteractiveNotificationReceiver {\\n    /// @notice Callback method that gets called after taker transferred funds to maker but before\\n    /// the opposite transfer happened\\n    function notifyFillOrder(\\n        address taker,\\n        address makerAsset,\\n        address takerAsset,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        bytes memory interactiveData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x94dd744e55a6eee1aa944b885d46c9ca5adc49bde5be854e08f8d4c31484a687\",\"license\":\"MIT\"},\"contracts/libraries/ArgumentsDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\n/// @title Library with gas efficient alternatives to `abi.decode`\\nlibrary ArgumentsDecoder {\\n    function decodeUint256(bytes memory data) internal pure returns(uint256) {\\n        uint256 value;\\n        assembly { // solhint-disable-line no-inline-assembly\\n            value := mload(add(data, 0x20))\\n        }\\n        return value;\\n    }\\n\\n    function decodeBool(bytes memory data) internal pure returns(bool) {\\n        bool value;\\n        assembly { // solhint-disable-line no-inline-assembly\\n            value := eq(mload(add(data, 0x20)), 1)\\n        }\\n        return value;\\n    }\\n\\n    function decodeTargetAndCalldata(bytes memory data) internal pure returns(address, bytes memory) {\\n        address target;\\n        bytes memory args;\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            target := mload(add(data, 0x14))\\n            args := add(data, 0x14)\\n            mstore(args, sub(mload(data), 0x14))\\n        }\\n        return (target, args);\\n    }\\n\\n    function decodeTargetAndData(bytes calldata data) internal pure returns(address, bytes calldata) {\\n        address target;\\n        bytes calldata args;\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            target := shr(96, calldataload(data.offset))\\n        }\\n        args = data[20:];\\n        return (target, args);\\n    }\\n}\\n\",\"keccak256\":\"0xb893e6e92297e67992217cbbea17bc4660b11ac7248c67a85cd77e96589edbed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516104ca3803806104ca83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161043a610090600039600081816055015260e5015261043a6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063cf21c7751461003b578063ed95063814610050575b600080fd5b61004e61004936600461027a565b6100a0565b005b6100777f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6040517f645b8b1b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063645b8b1b90602401602060405180830381865afa15801561012c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101509190610332565b600114610189576040517fff90872c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b801561021f57600036600061019e8585610228565b9250925092508273ffffffffffffffffffffffffffffffffffffffff1663cf21c7758b8b8b8b8b88886040518863ffffffff1660e01b81526004016101e9979695949392919061034b565b600060405180830381600087803b15801561020357600080fd5b505af1158015610217573d6000803e3d6000fd5b505050505050505b50505050505050565b60003681843560601c8282610240876014818b6103da565b939650945091925050509250925092565b803573ffffffffffffffffffffffffffffffffffffffff8116811461027557600080fd5b919050565b600080600080600080600060c0888a03121561029557600080fd5b61029e88610251565b96506102ac60208901610251565b95506102ba60408901610251565b9450606088013593506080880135925060a088013567ffffffffffffffff808211156102e557600080fd5b818a0191508a601f8301126102f957600080fd5b81358181111561030857600080fd5b8b602082850101111561031a57600080fd5b60208301945080935050505092959891949750929550565b60006020828403121561034457600080fd5b5051919050565b600073ffffffffffffffffffffffffffffffffffffffff808a168352808916602084015280881660408401525085606083015284608083015260c060a08301528260c0830152828460e0840137600060e0848401015260e07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f850116830101905098975050505050505050565b600080858511156103ea57600080fd5b838611156103f757600080fd5b505082019391909203915056fea26469706673582212207ef4bde3aac5ffce8928bde7564679f0b74233a9e0b3dddb418c829f7ed27e0564736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063cf21c7751461003b578063ed95063814610050575b600080fd5b61004e61004936600461027a565b6100a0565b005b6100777f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6040517f645b8b1b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063645b8b1b90602401602060405180830381865afa15801561012c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101509190610332565b600114610189576040517fff90872c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b801561021f57600036600061019e8585610228565b9250925092508273ffffffffffffffffffffffffffffffffffffffff1663cf21c7758b8b8b8b8b88886040518863ffffffff1660e01b81526004016101e9979695949392919061034b565b600060405180830381600087803b15801561020357600080fd5b505af1158015610217573d6000803e3d6000fd5b505050505050505b50505050505050565b60003681843560601c8282610240876014818b6103da565b939650945091925050509250925092565b803573ffffffffffffffffffffffffffffffffffffffff8116811461027557600080fd5b919050565b600080600080600080600060c0888a03121561029557600080fd5b61029e88610251565b96506102ac60208901610251565b95506102ba60408901610251565b9450606088013593506080880135925060a088013567ffffffffffffffff808211156102e557600080fd5b818a0191508a601f8301126102f957600080fd5b81358181111561030857600080fd5b8b602082850101111561031a57600080fd5b60208301945080935050505092959891949750929550565b60006020828403121561034457600080fd5b5051919050565b600073ffffffffffffffffffffffffffffffffffffffff808a168352808916602084015280881660408401525085606083015284608083015260c060a08301528260c0830152828460e0840137600060e0848401015260e07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f850116830101905098975050505050505050565b600080858511156103ea57600080fd5b838611156103f757600080fd5b505082019391909203915056fea26469706673582212207ef4bde3aac5ffce8928bde7564679f0b74233a9e0b3dddb418c829f7ed27e0564736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}